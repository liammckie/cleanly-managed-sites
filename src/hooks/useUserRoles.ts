
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';
import { supabase } from '@/lib/supabase';
import { UserRole, DbUserRole, adaptUserRoleFromDb, adaptUserRoleToDb } from '@/lib/types/users';

export function useUserRoles() {
  const queryClient = useQueryClient();

  const rolesQuery = useQuery({
    queryKey: ['user-roles'],
    queryFn: async () => {
      try {
        const { data, error } = await supabase
          .from('user_roles')
          .select('*, users:user_profiles(id)')
          .order('name', { ascending: true });

        if (error) throw error;

        // Add user count to each role
        const rolesWithCounts = data.map(role => ({
          ...role,
          user_count: role.users ? role.users.length : 0
        }));

        // Transform DB roles to frontend format
        return rolesWithCounts.map(dbRole => adaptUserRoleFromDb({
          ...dbRole,
          // Explicitly convert permissions to the expected type
          permissions: dbRole.permissions ? 
            // If it's a JSON string, parse it
            (typeof dbRole.permissions === 'string' ? 
              JSON.parse(dbRole.permissions) : dbRole.permissions) : 
            []
        }));
      } catch (error) {
        console.error('Error fetching user roles:', error);
        throw error;
      }
    }
  });

  const createRoleMutation = useMutation({
    mutationFn: async (role: Omit<UserRole, 'id' | 'created_at' | 'updated_at'>) => {
      try {
        const dbRole = adaptUserRoleToDb({
          ...role,
          id: '', // Will be generated by the database
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

        const { data, error } = await supabase
          .from('user_roles')
          .insert({
            name: dbRole.name,
            description: dbRole.description,
            permissions: dbRole.permissions,
          })
          .select()
          .single();

        if (error) throw error;

        // Convert permissions from JSON if needed
        const parsedData = {
          ...data,
          permissions: typeof data.permissions === 'string' ? 
            JSON.parse(data.permissions) : data.permissions
        };

        return adaptUserRoleFromDb(parsedData);
      } catch (error) {
        console.error('Error creating user role:', error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['user-roles'] });
      toast.success('Role created successfully');
    },
    onError: (error: any) => {
      toast.error(`Failed to create role: ${error.message}`);
    }
  });

  const updateRoleMutation = useMutation({
    mutationFn: async (role: UserRole) => {
      try {
        const dbRole = adaptUserRoleToDb(role);

        const { data, error } = await supabase
          .from('user_roles')
          .update({
            name: dbRole.name,
            description: dbRole.description,
            permissions: dbRole.permissions,
            updated_at: new Date().toISOString()
          })
          .eq('id', role.id)
          .select()
          .single();

        if (error) throw error;

        // Convert permissions from JSON if needed
        const parsedData = {
          ...data,
          permissions: typeof data.permissions === 'string' ? 
            JSON.parse(data.permissions) : data.permissions
        };

        return adaptUserRoleFromDb(parsedData);
      } catch (error) {
        console.error('Error updating user role:', error);
        throw error;
      }
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: ['user-roles'] });
      queryClient.invalidateQueries({ queryKey: ['user-role', variables.id] });
      toast.success('Role updated successfully');
    },
    onError: (error: any) => {
      toast.error(`Failed to update role: ${error.message}`);
    }
  });

  const deleteRoleMutation = useMutation({
    mutationFn: async (roleId: string) => {
      try {
        // First check if there are users with this role
        const { data: users, error: usersError } = await supabase
          .from('user_profiles')
          .select('id')
          .eq('role_id', roleId);

        if (usersError) throw usersError;

        if (users && users.length > 0) {
          throw new Error(`Cannot delete role: ${users.length} users are still assigned to this role.`);
        }

        const { error } = await supabase
          .from('user_roles')
          .delete()
          .eq('id', roleId);

        if (error) throw error;

        return { success: true, id: roleId };
      } catch (error) {
        console.error('Error deleting user role:', error);
        throw error;
      }
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: ['user-roles'] });
      queryClient.invalidateQueries({ queryKey: ['user-role', variables] });
      toast.success('Role deleted successfully');
    },
    onError: (error: any) => {
      toast.error(`Failed to delete role: ${error.message}`);
    }
  });

  const getRoleMutation = useMutation({
    mutationFn: async (roleId: string) => {
      try {
        const { data, error } = await supabase
          .from('user_roles')
          .select('*, users:user_profiles(id)')
          .eq('id', roleId)
          .single();

        if (error) throw error;

        // Add user count to the role
        const roleWithCount = {
          ...data,
          user_count: data.users ? data.users.length : 0
        };

        // Convert permissions from JSON if needed
        const parsedData = {
          ...roleWithCount,
          permissions: typeof roleWithCount.permissions === 'string' ? 
            JSON.parse(roleWithCount.permissions) : roleWithCount.permissions
        };

        return adaptUserRoleFromDb(parsedData);
      } catch (error) {
        console.error('Error fetching user role:', error);
        throw error;
      }
    }
  });

  return {
    roles: rolesQuery.data || [],
    isLoading: rolesQuery.isLoading,
    isRefreshing: rolesQuery.isRefetching,
    error: rolesQuery.error,
    createRole: createRoleMutation.mutate,
    updateRole: updateRoleMutation.mutate,
    deleteRole: deleteRoleMutation.mutate,
    getRole: getRoleMutation.mutate,
    isCreating: createRoleMutation.isPending,
    isUpdating: updateRoleMutation.isPending,
    isDeleting: deleteRoleMutation.isPending,
    refetch: rolesQuery.refetch
  };
}

export function useRole(roleId: string) {
  const { data: role, isLoading, error } = useQuery({
    queryKey: ['user-role', roleId],
    queryFn: async () => {
      try {
        const { data, error } = await supabase
          .from('user_roles')
          .select('*, users:user_profiles(id)')
          .eq('id', roleId)
          .single();

        if (error) throw error;

        // Add user count to the role
        const roleWithCount = {
          ...data,
          user_count: data.users ? data.users.length : 0,
          // Ensure permissions is the right type
          permissions: typeof data.permissions === 'string' ? 
            JSON.parse(data.permissions) : data.permissions
        };

        return adaptUserRoleFromDb(roleWithCount);
      } catch (error) {
        console.error('Error fetching user role:', error);
        throw error;
      }
    },
    enabled: !!roleId,
  });

  return {
    role,
    isLoading,
    error,
  };
}
